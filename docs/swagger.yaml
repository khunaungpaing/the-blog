basePath: /api/v1
definitions:
  gin.H:
    additionalProperties: {}
    type: object
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  models.Category:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      posts:
        description: Optional, Many-to-Many relationship with Post (using a join table)
        items:
          $ref: '#/definitions/models.Post'
        type: array
      updatedAt:
        type: string
    type: object
  models.Comment:
    properties:
      content:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      post_id:
        type: integer
      updatedAt:
        type: string
      user_id:
        description: Optional
        type: integer
    type: object
  models.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  models.Media:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      filename:
        type: string
      id:
        type: integer
      mime_type:
        description: Media file type (e.g., image/jpeg)
        type: string
      path:
        description: Path to the media file in cloud storage
        type: string
      post_id:
        description: Optional, Foreign Key referencing the Post
        type: integer
      updatedAt:
        type: string
    type: object
  models.Post:
    properties:
      categories:
        description: Optional, Many-to-Many relationship with Category (using a join
          table)
        items:
          $ref: '#/definitions/models.Category'
        type: array
      comments:
        description: One-to-Many relationship with Comment
        items:
          $ref: '#/definitions/models.Comment'
        type: array
      content:
        description: Can include HTML for formatting
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      media:
        allOf:
        - $ref: '#/definitions/models.Media'
        description: Optional, One-to-One or One-to-Many relationship with Media
      published_at:
        description: Optional publish timestamp
        type: string
      slug:
        description: Unique URL slug for SEO
        type: string
      status:
        type: string
      tags:
        description: Optional, Many-to-Many relationship with Tag (using a join table)
        items:
          $ref: '#/definitions/models.Tag'
        type: array
      title:
        type: string
      updated_at:
        description: Timestamp of last update
        type: string
      updatedAt:
        type: string
      user_id:
        type: integer
    type: object
  models.Tag:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      posts:
        description: Optional, Many-to-Many relationship with Post (using a join table)
        items:
          $ref: '#/definitions/models.Post'
        type: array
      updatedAt:
        type: string
    type: object
  models.User:
    properties:
      bio:
        description: Optional user bio
        type: string
      comments:
        description: Optional, One-to-Many relationship with Comment
        items:
          $ref: '#/definitions/models.Comment'
        type: array
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        description: Unique email
        type: string
      id:
        type: integer
      password:
        description: Hashed password, excluded from JSON
        type: string
      posts:
        description: One-to-Many relationship with Post
        items:
          $ref: '#/definitions/models.Post'
        type: array
      profile_pic:
        description: Optional profile picture URL
        type: string
      updatedAt:
        type: string
      username:
        description: Unique username
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: <EMAIL>
    name: API Support
    url: https://example.com/support
  description: This is a sample blog API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: https://example.com/terms/
  title: The Blog API
  version: "1.0"
paths:
  /comments:
    post:
      consumes:
      - application/json
      description: Create a new comment for a post
      parameters:
      - description: Authorization header using the Bearer scheme
        in: header
        name: Authorization
        required: true
        type: string
      - description: New Comment object
        in: body
        name: newComment
        required: true
        schema:
          $ref: '#/definitions/models.Comment'
      produces:
      - application/json
      responses:
        "201":
          description: Created comment
          schema:
            $ref: '#/definitions/models.Comment'
        "400":
          description: Bad request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Create a new comment
      tags:
      - Comment
  /comments/{commentID}:
    delete:
      consumes:
      - application/json
      description: Delete a comment by ID
      parameters:
      - description: Authorization header using the Bearer scheme
        in: header
        name: Authorization
        required: true
        type: string
      - description: Comment ID
        in: path
        name: commentID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Comment deleted successfully
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            type: string
        "404":
          description: Comment not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Delete a comment
      tags:
      - Comment
    put:
      consumes:
      - application/json
      description: Update a comment by ID
      parameters:
      - description: Authorization header using the Bearer scheme
        in: header
        name: Authorization
        required: true
        type: string
      - description: Comment ID
        in: path
        name: commentID
        required: true
        type: integer
      - description: Updated Comment object
        in: body
        name: updatedComment
        required: true
        schema:
          $ref: '#/definitions/models.Comment'
      produces:
      - application/json
      responses:
        "200":
          description: Updated comment
          schema:
            $ref: '#/definitions/models.Comment'
        "400":
          description: Bad request
          schema:
            type: string
        "404":
          description: Comment not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Update a comment
      tags:
      - Comment
  /comments/{postId}:
    get:
      consumes:
      - application/json
      description: Get comments for a post
      parameters:
      - description: Authorization header using the Bearer scheme
        in: header
        name: Authorization
        required: true
        type: string
      - description: Post ID
        in: path
        name: postId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Comments
          schema:
            items:
              $ref: '#/definitions/models.Comment'
            type: array
        "400":
          description: Bad request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Get comments for a post
      tags:
      - Comment
  /likes/{postId}:
    delete:
      consumes:
      - application/json
      description: Unlike a post
      parameters:
      - description: Authorization header using the Bearer scheme
        in: header
        name: Authorization
        required: true
        type: string
      - description: Post ID
        in: path
        name: postId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Post unliked successfully
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Unlike a post
      tags:
      - Like
    get:
      consumes:
      - application/json
      description: Get likes for a post
      parameters:
      - description: Authorization header using the Bearer scheme
        in: header
        name: Authorization
        required: true
        type: string
      - description: Post ID
        in: path
        name: postId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Likes count
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Get likes for a post
      tags:
      - Like
    post:
      consumes:
      - application/json
      description: Like a post
      parameters:
      - description: Authorization header using the Bearer scheme
        in: header
        name: Authorization
        required: true
        type: string
      - description: Post ID
        in: path
        name: postId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Post liked successfully
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Like a post
      tags:
      - Like
  /login:
    post:
      consumes:
      - application/json
      description: Login an existing user
      parameters:
      - description: User login information
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Login an existing user
      tags:
      - users
  /posts:
    get:
      consumes:
      - application/json
      description: Get paginated posts
      parameters:
      - description: Authorization header using the Bearer scheme
        in: header
        name: Authorization
        required: true
        type: string
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Page size
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Paginated posts
          schema:
            $ref: '#/definitions/models.Post'
        "400":
          description: Bad request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Get paginated posts
      tags:
      - Post
    post:
      consumes:
      - application/json
      description: Create a new post
      parameters:
      - description: Authorization header using the Bearer scheme
        in: header
        name: Authorization
        required: true
        type: string
      - description: New Post object
        in: body
        name: newPost
        required: true
        schema:
          $ref: '#/definitions/models.Post'
      produces:
      - application/json
      responses:
        "201":
          description: Created post
          schema:
            $ref: '#/definitions/models.Post'
        "400":
          description: Bad request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Create a new post
      tags:
      - Post
  /posts/{postId}:
    delete:
      consumes:
      - application/json
      description: Delete an existing post
      parameters:
      - description: Post ID
        in: path
        name: postId
        required: true
        type: string
      - description: Authorization header using the Bearer scheme
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Post deleted successfully
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Post not found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Failed to delete post
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete an existing post
      tags:
      - Post
    put:
      consumes:
      - application/json
      description: Update an existing post
      parameters:
      - description: Post ID
        in: path
        name: postId
        required: true
        type: string
      - description: Authorization header using the Bearer scheme
        in: header
        name: Authorization
        required: true
        type: string
      - description: Updated Post object
        in: body
        name: updatedPost
        required: true
        schema:
          $ref: '#/definitions/models.Post'
      produces:
      - application/json
      responses:
        "200":
          description: Updated post
          schema:
            $ref: '#/definitions/models.Post'
        "400":
          description: Bad request
          schema:
            type: string
        "404":
          description: Post not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Update an existing post
      tags:
      - Post
  /signup:
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: User information
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Sign up a new user
      tags:
      - users
swagger: "2.0"
