basePath: /api/v1
definitions:
  dto.RequestCategory:
    properties:
      description:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  dto.RequestComment:
    properties:
      content:
        type: string
    type: object
  dto.RequestMedia:
    properties:
      filename:
        type: string
      id:
        type: integer
      mime_type:
        type: string
      path:
        type: string
    type: object
  dto.RequestPost:
    properties:
      categories:
        items:
          $ref: '#/definitions/dto.RequestCategory'
        type: array
      content:
        type: string
      id:
        type: integer
      media:
        $ref: '#/definitions/dto.RequestMedia'
      slug:
        type: string
      status:
        type: string
      tags:
        items:
          $ref: '#/definitions/dto.RequestTag'
        type: array
      title:
        type: string
    type: object
  dto.RequestTag:
    properties:
      description:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  gin.H:
    additionalProperties: {}
    type: object
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  models.Category:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      posts:
        description: Optional, Many-to-Many relationship with Post (using a join table)
        items:
          $ref: '#/definitions/models.Post'
        type: array
      updatedAt:
        type: string
    type: object
  models.Comment:
    properties:
      content:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      post_id:
        type: integer
      updatedAt:
        type: string
      user_id:
        description: Optional
        type: integer
    type: object
  models.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  models.Media:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      filename:
        type: string
      id:
        type: integer
      mime_type:
        description: Media file type (e.g., image/jpeg)
        type: string
      path:
        description: Path to the media file in cloud storage
        type: string
      post_id:
        description: Optional, Foreign Key referencing the Post
        type: integer
      updatedAt:
        type: string
    type: object
  models.Post:
    properties:
      categories:
        description: Optional, Many-to-Many relationship with Category (using a join
          table)
        items:
          $ref: '#/definitions/models.Category'
        type: array
      comments:
        description: One-to-Many relationship with Comment
        items:
          $ref: '#/definitions/models.Comment'
        type: array
      content:
        description: Can include HTML for formatting
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      media:
        allOf:
        - $ref: '#/definitions/models.Media'
        description: Optional, One-to-One or One-to-Many relationship with Media
      slug:
        description: Unique URL slug for SEO
        type: string
      status:
        type: string
      tags:
        description: Optional, Many-to-Many relationship with Tag (using a join table)
        items:
          $ref: '#/definitions/models.Tag'
        type: array
      title:
        type: string
      updatedAt:
        type: string
      user_id:
        type: integer
    type: object
  models.Tag:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      posts:
        description: Optional, Many-to-Many relationship with Post (using a join table)
        items:
          $ref: '#/definitions/models.Post'
        type: array
      updatedAt:
        type: string
    type: object
  models.User:
    properties:
      bio:
        description: Optional user bio
        type: string
      comments:
        description: Optional, One-to-Many relationship with Comment
        items:
          $ref: '#/definitions/models.Comment'
        type: array
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        description: Unique email
        type: string
      id:
        type: integer
      password:
        description: Hashed password, excluded from JSON
        type: string
      posts:
        description: One-to-Many relationship with Post
        items:
          $ref: '#/definitions/models.Post'
        type: array
      profile_pic:
        description: Optional profile picture URL
        type: string
      updatedAt:
        type: string
      username:
        description: Unique username
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: khunaungpaing.it.tumlm@gmail.com
    name: API Support
  description: The Blog API is a robust and efficient solution for managing a blog
    platform. Developed using Golang and Gin, it embodies modern practices and technologies
    for seamless performance and scalability. Leveraging PostgreSQL as its database
    engine ensures reliability and flexibility in data management, while JWT (JSON
    Web Tokens) authentication enhances security by providing a stateless authentication
    mechanism. \n\nThis API serves as a foundational component for building and managing
    a dynamic blogging platform, offering a comprehensive set of endpoints for user
    authentication, post management, comment handling, user profile management, and
    more. With clear and concise documentation and a user-friendly architecture, integrating
    this API into your project is straightforward and hassle-free.\n\nWhether you're
    developing a personal blog, a collaborative writing platform, or an enterprise-level
    content management system, The Blog API provides the necessary tools and functionality
    to streamline your development process and deliver a seamless user experience.
    Unlock the power of modern web development with The Blog API.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: The Blog API
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Login an existing user
      parameters:
      - description: User login information
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Login an existing user
      tags:
      - users
  /posts:
    get:
      consumes:
      - application/json
      description: Retrieve a list of posts with pagination support.
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of items per page (default: 10)'
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of posts
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Retrieve a list of posts
      tags:
      - posts
    post:
      consumes:
      - application/json
      description: Create a new post with the provided data.
      parameters:
      - description: Authorization token using the Bearer scheme
        in: header
        name: Authorization
        required: true
        type: string
      - description: Post data
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/dto.RequestPost'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created post
          schema:
            $ref: '#/definitions/models.Post'
        "400":
          description: Bad request, invalid request body
          schema:
            $ref: '#/definitions/gin.H'
        "401":
          description: Unauthorized access, missing or invalid token
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create a new post
      tags:
      - posts
  /posts/{postId}:
    delete:
      consumes:
      - application/json
      description: Delete a specific post by its ID.
      parameters:
      - description: Post ID
        in: path
        name: postId
        required: true
        type: integer
      - description: Authorization token using the Bearer scheme
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Post deleted successfully
          schema:
            $ref: '#/definitions/gin.H'
        "401":
          description: Unauthorized access, missing or invalid token
          schema:
            $ref: '#/definitions/gin.H'
        "403":
          description: Forbidden, user is not authorized to delete this post
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Post not found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a post
      tags:
      - posts
    get:
      consumes:
      - application/json
      description: Retrieve a specific post by its ID.
      parameters:
      - description: Post ID
        in: path
        name: postId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Found post
          schema:
            $ref: '#/definitions/models.Post'
        "404":
          description: Post not found
          schema:
            $ref: '#/definitions/gin.H'
      summary: Retrieve a specific post
      tags:
      - posts
    put:
      consumes:
      - application/json
      description: Update an existing post with the provided data.
      parameters:
      - description: Post ID
        in: path
        name: postId
        required: true
        type: integer
      - description: Authorization token using the Bearer scheme
        in: header
        name: Authorization
        required: true
        type: string
      - description: Updated post data
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/dto.RequestPost'
      produces:
      - application/json
      responses:
        "200":
          description: Post updated successfully
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad request, invalid request body
          schema:
            $ref: '#/definitions/gin.H'
        "401":
          description: Unauthorized access, missing or invalid token
          schema:
            $ref: '#/definitions/gin.H'
        "403":
          description: Forbidden, user is not authorized to update this post
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Post not found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a post
      tags:
      - posts
  /posts/{postId}/comments:
    get:
      consumes:
      - application/json
      description: Retrieves comments for the specified post.
      parameters:
      - description: ID of the post
        in: path
        name: postId
        required: true
        type: integer
      - description: Authorization token using the Bearer scheme
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved comments
          schema:
            items:
              $ref: '#/definitions/models.Comment'
            type: array
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get comments for a post
      tags:
      - comments
    post:
      consumes:
      - application/json
      description: Create a new comment for the specified post.
      parameters:
      - description: ID of the post to which the comment will be added
        in: path
        name: postId
        required: true
        type: integer
      - description: Authorization token using the Bearer scheme
        in: header
        name: Authorization
        required: true
        type: string
      - description: Comment object containing content
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/dto.RequestComment'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created comment
          schema:
            $ref: '#/definitions/models.Comment'
        "400":
          description: Bad request, invalid postId or request body
          schema:
            $ref: '#/definitions/gin.H'
        "401":
          description: Unauthorized access, missing or invalid token
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Post not found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create a new comment
      tags:
      - comments
  /posts/{postId}/comments/{commentId}:
    delete:
      consumes:
      - application/json
      description: Deletes the specified comment.
      parameters:
      - description: ID of the comment
        in: path
        name: commentId
        required: true
        type: integer
      - description: Authorization token using the Bearer scheme
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted comment
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a comment
      tags:
      - comments
    put:
      consumes:
      - application/json
      description: Updates the specified comment.
      parameters:
      - description: ID of the post
        in: path
        name: postId
        required: true
        type: integer
      - description: ID of the comment
        in: path
        name: commentId
        required: true
        type: integer
      - description: Authorization token using the Bearer scheme
        in: header
        name: Authorization
        required: true
        type: string
      - description: Updated comment object
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/dto.RequestComment'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated comment
          schema:
            $ref: '#/definitions/models.Comment'
        "400":
          description: Bad request, invalid request body
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Comment not found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a comment
      tags:
      - comments
  /posts/{postId}/likes:
    delete:
      consumes:
      - application/json
      description: Unlike a post
      parameters:
      - description: Authorization header using the Bearer scheme
        in: header
        name: Authorization
        required: true
        type: string
      - description: Post ID
        in: path
        name: postId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Post unliked successfully
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Unlike a post
      tags:
      - Like
    get:
      consumes:
      - application/json
      description: Get likes for a post
      parameters:
      - description: Authorization header using the Bearer scheme
        in: header
        name: Authorization
        required: true
        type: string
      - description: Post ID
        in: path
        name: postId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Likes count
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Get likes for a post
      tags:
      - Like
    post:
      consumes:
      - application/json
      description: Like a post
      parameters:
      - description: Authorization header using the Bearer scheme
        in: header
        name: Authorization
        required: true
        type: string
      - description: Post ID
        in: path
        name: postId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Post liked successfully
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Like a post
      tags:
      - Like
  /signup:
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: User information
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Sign up a new user
      tags:
      - users
swagger: "2.0"
